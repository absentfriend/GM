# Python code obfuscated by www.development-tools.net 
 

import base64, codecs
magic = 'IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIw0jIyMjIyMjIyMjIyMjIyMjIyMjIyBTVEFSVCBBRERPTiBJTVBPUlRTICMjIyMjIyMjIyMjIyMjIyMjIyMjDWZyb20ga29kaV9zaXggaW1wb3J0IHhibWMsIHhibWNhZGRvbiwgeGJtY3BsdWdpbiwgeGJtY2d1aSwgeGJtY3Zmcw1mcm9tIHNpeC5tb3Zlcy51cmxsaWIucGFyc2UgaW1wb3J0IHBhcnNlX3FzLCBxdW90ZV9wbHVzLCB1cmxwYXJzZSwgcGFyc2VfcXNsDWZyb20gc2l4IGltcG9ydCBQWTINDQ1pbXBvcnQgb3MNaW1wb3J0IHJlDWltcG9ydCByZXF1ZXN0cw1pbXBvcnQgc3lzDWltcG9ydCB0aW1lDWltcG9ydCBweXhibWN0DWltcG9ydCByZXNvbHZldXJsDWZyb20gYnM0IGltcG9ydCBCZWF1dGlmdWxTb3VwDXRyYW5zbGF0ZVBhdGggPSB4Ym1jLnRyYW5zbGF0ZVBhdGggaWYgUFkyIGVsc2UgeGJtY3Zmcy50cmFuc2xhdGVQYXRoDWRpYWxvZyA9IHhibWNndWkuRGlhbG9nKCkNDSMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMNIyMjIyMjIyMjIyMjIyMjIyMjIyMgU0VUIEFERE9OIElEICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIw1fYWRkb25faWRfID0gJ3BsdWdpbi52aWRlby5FbnRlcnRhaW5NZScNX3NlbGZfID0geGJtY2FkZG9uLkFkZG9uKGlkPV9hZGRvbl9pZF8pDURhdGUgPSB0aW1lLnN0cmZ0aW1lKCIlQSAlQiAlZCIpDUFkZG9uVGl0bGUgPSAnW0JdW0NPTE9SIHJlZF1FW0NPTE9SIHllbGxvd11udGVydGFpbiBNZVsvQl1bL0NPTE9SXScNZHAgPSB4Ym1jZ3VpLkRpYWxvZ1Byb2dyZXNzKCkNaWNvbiAgPSB0cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovL2hvbWUvYWRkb25zLycgKyBfYWRkb25faWRfLCAnaWNvbi5wbmcnKSkNQWRkb25pY29uICA9IHRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKCdzcGVjaWFsOi8vaG9tZS9hZGRvbnMvJyArIF9hZGRvbl9pZF8sICdpY29uLnBuZycpKQ0jIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjDSMjIyMjIyMjIyMjIyMjIyMjIyMjIFNFVCBBRERPTiBUSEVNRSBESVJFQ1RPUlkgIyMjIyMjIyMjIyMjIyMNX3RoZW1lXwkJCT0gX3NlbGZfLmdldFNldHRpbmcoJ1RoZW1lJykNX2ltYWdlc18JCT0gJy9yZXNvdXJjZXMvJyArIF90aGVtZV8JDSMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMNIyMjIyMjIyMjIyMjIyMjIyMjIyMgU0VUIEFERE9OIFRIRU1FIElNQUdFUyAjIyMjIyMjIyMjIyMjIyMjIw1CYWNrZ3JvdW5kX0ltYWdlID0gdHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oJ3NwZWNpYWw6Ly9ob21lL2FkZG9ucy8nICsgX2FkZG9uX2lkXyArIF9pbWFnZXNfLCAnYmcuanBnJykpDVNUZXh0ID0gdHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oJ3NwZWNpYWw6Ly9ob21lL2FkZG9ucy8nICsgX2FkZG9uX2lkXyArIF9pbWFnZXNfLCAnc2VhcmNodHh0LnBuZycpKQ1CdXR0b25GcmFtZSA9IHRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKCdzcGVjaWFsOi8vaG9tZS9hZGRvbnMvJyArIF9hZGRvbl9pZF8gKyBfaW1hZ2VzXywgJ0J1dHRvbkZyYW1lLnBuZycpKQ1CdXR0b25GcmFtZVMgPSB0cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovL2hvbWUvYWRkb25zLycgKyBfYWRkb25faWRfICsgX2ltYWdlc18sICdCdXR0b25GcmFtZVMucG5nJykpDUJ1dHRvbk1vdmllcyA9IHRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKCdzcGVjaWFsOi8vaG9tZS9hZGRvbnMvJyArIF9hZGRvbl9pZF8gKyBfaW1hZ2VzXywgJ01vdmllc19CdXR0b24ucG5nJykpDUJ1dHRvbk1vdmllc1MgPSB0cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovL2hvbWUvYWRkb25zLycgKyBfYWRkb25faWRfICsgX2ltYWdlc18sICdNb3ZpZXNfQnV0dG9uUy5wbmcnKSkNQnV0dG9uVHZTaG93cyA9IHRyYW5zbGF0ZVBhdGgob3MucGF0aC5qb2luKCdzcGVjaWFsOi8vaG9tZS9hZGRvbnMvJyArIF9hZGRvbl9pZF8gKyBfaW1hZ2VzXywgJ1Nob3dzX0J1dHRvbi5wbmcnKSkNQnV0dG9uVHZTaG93c1MgPSB0cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovL2hvbWUvYWRkb25zLycgKyBfYWRkb25faWRfICsgX2ltYWdlc18sICdTaG93c19CdXR0b25TLnBuZycpKQ1CdXR0b25TZWFyY2ggPSB0cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovL2hvbWUvYWRkb25zLycgKyBfYWRkb25faWRfICsgX2ltYWdlc18sICdidXR0b25fc2VhcmNoLnBuZycpKQ1CdXR0b25TZWFyY2hTID0gdHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oJ3NwZWNpYWw6Ly9ob21lL2FkZG9ucy8nICsgX2FkZG9uX2lkXyArIF9pbWFnZXNfLCAnYnV0dG9uX3NlYXJjaFMucG5nJykpDUJ1dHRvblF1aXQgPSB0cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovL2hvbWUvYWRkb25zLycgKyBfYWRkb25faWRfICsgX2ltYWdlc18sICdRdWl0X0J1dHRvbi5wbmcnKSkNQnV0dG9uUXVpdFMgPSB0cmFuc2xhdGVQYXRoKG9zLnBhdGguam9pbignc3BlY2lhbDovL2hvbWUvYWRkb25zLycgKyBfYWRkb25faWRfICsgX2ltYWdlc18sICdRdWl0X0J1dHRvblMucG5nJykpDUxpc3RfRm9jdXNlZF9kZWZhdWx0ID0gdHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oJ3NwZWNpYWw6Ly9ob21lL2FkZG9ucy8nICsgX2FkZG9uX2lkXyArIF9pbWFnZXNfLCAnbGlzdC1iZy1zZWxlY3RlZC1kZWZhdWx0LnBuZycpKQ1MaXN0X2JnID0gdHJhbnNsYXRlUGF0aChvcy5wYXRoLmpvaW4oJ3NwZWNpYWw6Ly9ob21lL2FkZG9ucy8nICsgX2FkZG9uX2lkXyArIF9pbWFnZXNfLCAnbGlzdC1iZy5wbmcnKSkNTW92aWVCYXNlID0gJ2h0dHBzOi8vc2VlaGQubmwnDSMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMNIyMjIyMjIyMjIyBGdW5jdGlvbiBUbyBDYWxsIFRoYXQgU3RhcnRzIFRoZSBXaW5kb3cgIyMjIyMjIyMjIw1kZWYgTWFpbldpbmRvdygpOg0gICAgd2luZG93ID0gTWFpbignRW50ZXJ0YWluTWUnKQ0gICAgd2luZG93LmRvTW9kYWwoKQ0gICAgZGVsIHdpbmRvdw0NDWRlZiBwb3Aoc2VsZik6DSAgICBnbG9iYWwgbG9nb3MNICAgIGdsb2JhbCB1cmxzDSAgICBnbG9iYWwgbW92aWV0aXRsZXMNICAgIGxvZ29zID0gW10NICAgIHVybHMgPSBbXQ0gICAgbW92aWV0aXRsZXMgPSBbXQ0gICAgaGVhZGVycyA9IHsnVXNlci1BZ2VudCc6ICdNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvNjAuMC4zMTEyLjExMyBTYWZhcmkvNTM3LjM2J30NICAgIE1vdmllQmFzZSA9ICdodHRwczovL3NlZWhkLm5sL2FsbC9tb3ZpZS9hbGwvYWxsLzIvMS8nDSAgICBCYXNlX1VybCA9ICdodHRwczovL3NlZWhkLm5sJw0gICAgbGluayA9IHJlcXVlc3RzLmdldChNb3ZpZUJhc2UsaGVhZGVycz1oZWFkZXJzKS50ZXh0DSAgICBzb3VwID0gQmVhdXRpZnVsU291cChsaW5rLCAnaHRtbC5wYXJzZXInKQ0gICAgZGF0YSA9IHNvdXAuZmluZF9hbGwoJ2RpdicsIGNsYXNzXz17J21sLWl0ZW0nfSkNICAgIHVybHMuYXBwZW5kKCcnKQ0gICAgbW92aWV0aXRsZXMuYXBwZW5kKCcnKQ0gICAgbG9nb3MuYXBwZW5kKCcnKQ0gICAgbGl6ID0geGJtY2d1aS5MaXN0SXRlbSgnW0NPTE9SIHJlZF1bQl1QT1BVTEFSIE1PVklFU1svQl1bL0NPTE9SXScpDSAgICBsaXouc2V0QXJ0KHsidGh1bWIiOiBBZGRvbmljb259KQ0gICAgbGl6LnNldFBhdGgoJ251bGwnKQ0gICAgc2VsZi5MSVNULmFkZEl0ZW0obGl6KQ0gICAgZm9yIGkgaW4gZGF0YToNICAgICAgICBuYW1lID0gaS5hWyd0aXRsZSddDSAgICAgICAgdXJsID0gaS5hWydocmVmJ10NICAgICAgICBpY29uID0gaS5pbWdbJ2RhdGEtb3JpZ2luYWwnXQ0gICAgICAgIGlmIG5vdCBCYXNlX1VybCBpbiB1cmw6IHVybCA9ICgnJXMlcycgJSAoQmFzZV9VcmwsdXJsKSkNICAgICAgICBtb3ZpZXRpdGxlcy5hcHBlbmQobmFtZSkNICAgICAgICB1cmxzLmFwcGVuZCh1cmwpDSAgICAgICAgbG9nb3MuYXBwZW5kKGljb24pDSAgICAgICAgbGl6ID0geGJtY2d1aS5MaXN0SXRlbShuYW1lKQ0gICAgICAgIGxpei5zZXRBcnQoeyJ0aHVtYiI6IGljb259KQ0gICAgICAgIHNlbGYuTElTVC5hZGRJdGVtKGxpeikNICAgICAgICAjbGkgPSB4Ym1jZ3VpLkxpc3RJdGVtKG5hbWUsIHNldEFydChpY29uKSkNICAgICAgICAjc2VsZi5MSVNULmFkZEl0ZW0obGkpDQ1kZWYgc2VhcmNoKHNlbGYpOg0Jc3RyaW5nID0nJw0Ja2V5Ym9hcmQgPSB4Ym1jLktleWJvYXJkKHN0cmluZywgJ1tDT0xPUiB5ZWxsb3ddW0JdV2hhdCBBcmUgV2UgU2VhcmNoaW5nIEZvcj9bL0JdWy9DT0xPUl0nKQ0Ja2V5Ym9hcmQuZG9Nb2RhbCgpDQlpZiBrZXlib2FyZC5pc0NvbmZpcm1lZCgpOg0JCXN0cmluZyA9IGtleWJvYXJkLmdldFRleHQoKQ0JCXN0cmluZyA9IHN0cmluZy5yZXBsYWNlKCcgJywnLScpDQkJaWYgbGVuKHN0cmluZyk+MToNCQkJZGlhbG9nLm5vdGlmaWNhdGlvbihBZGRvblRpdGxlLCAiW0NPTE9SIHJlZF1bQl1TZWFyY2hpbmcgTm93IVsvQl1bL0NPTE9SXSIsIEFkZG9uaWNvbiwgNTAwMCkNCQkJdGVybSA9IHN0cmluZy5sb3dlcigpDQkJCXVybCA9ICgnaHR0cHM6Ly9zZWVoZC5ubC9zZWFyY2gvJXMvMS8nICV0ZXJtKQ0JCQlEaXNwbGF5U2VhcmNoKHNlbGYsdXJsKQ0JCWVsc2U6DQkJCWRpYWxvZy5ub3RpZmljYXRpb24oQWRkb25UaXRsZSwgIltDT0xPUiByZWRdW0JdU29ycnksIE5vIFNlYXJjaCBUZXJtIFdhcyBFbnRlcmVkIVsvQl1bL0NPTE9SXSIsIGljb24sIDUwMDApDQkJcXVpdCgpDWRlZiBEaXNwbGF5U2VhcmNoKHNlbGYsdXJsKToNICAgIGdsb2JhbCBsb2dvcw0gICAgZ2xvYmFsIHVybHMNICAgIGdsb2JhbCBtb3ZpZXRpdGxlcw0gICAgc2VsZi5MSVNUMi5yZXNldCgpDSAgICBsb2dvcyA9IFtdDSAgICB1cmxzID0gW10NICAgIG1vdmlldGl0bGVzID0gW10NICAgIHNlbGYuTElTVDIuc2V0VmlzaWJsZShUcnVlKQ0gICAgc2VsZi5idXR0b24xLmNvbnRyb2xSaWdodChzZWxmLkxJU1QyKQ0gICAgc2VsZi5idXR0b24yLmNvbnRyb2xSaWdodChzZWxmLkxJU1QyKQ0gICAgc2VsZi5idXR0b240LmNvbnRyb2xMZWZ0KHNlbGYuTElTVDIpDSAgICBzZWxmLmJ1dHRvbjMuY29udHJvbExlZnQoc2VsZi5MS'
love = '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'
god = 'AgICAgICBxdWl0KCkNICAgIGVsc2U6DSAgICAgICAgbGluayA9IHJlcXVlc3RzLmdldChkYXRhLCBoZWFkZXJzPWhlYWRlcnMpLnRleHQNICAgICAgICBzb3VwID0gQmVhdXRpZnVsU291cChsaW5rLCAnaHRtbC5wYXJzZXInKQ0gICAgICAgIGRhdGEyID0gc291cC5maW5kKCdzY3JpcHQnKQ0gICAgICAgICMgeGJtYy5sb2cobXNnPXN0cihkYXRhMiksIGxldmVsPXhibWMuTE9HSU5GTykNICAgICAgICBpZGZpbmQgPSByZS5maW5kYWxsKHInJydwYXJhbXM6XHN7aW1kYjpbJyJdKC4qPylbJyJdJycnLCBzdHIoZGF0YTIpKVswXQ0gICAgICAgIHRtZGJpZCA9IHJlLmZpbmRhbGwocicnJ3RtZGJJZDooLio/KSwnJycsIHN0cihkYXRhMikpWzBdDSAgICAgICAgbW92aWV0aXRsZSA9IHJlLmZpbmRhbGwocicnJ3RpdGxlOlsnIl0oLio/KVsnIl0nJycsIHN0cihkYXRhMikpWzBdDSAgICAgICAgb3ZlcnZpZXcgPSByZS5maW5kYWxsKHInJydvdmVydmlldzpbJyJdKC4qPylbJyJdJycnLCBzdHIoZGF0YTIpKVswXSANICAgICAgICBiYWNrZHJvcCA9IHJlLmZpbmRhbGwocicnJ2JhY2tkcm9wOlsnIl0oLio/KVsnIl0nJycsIHN0cihkYXRhMikpWzBdDSAgICAgICAgDSAgICAgICAgZGF0YSA9IHsNICAgICAgICAgICAgInR5cGUiOiAibW92aWUiLA0gICAgICAgICAgICAiX2lkIjogaWRmaW5kLA0gICAgICAgICAgICAiZmlsbSI6IHsNICAgICAgICAgICAgICAgICJfaWQiOiBpZGZpbmQsDSAgICAgICAgICAgICAgICAidGl0bGUiOiBtb3ZpZXRpdGxlLA0gICAgICAgICAgICAgICAgIm92ZXJ2aWV3Ijogb3ZlcnZpZXcsDSAgICAgICAgICAgICAgICAidG1kYklkIjogdG1kYmlkLA0gICAgICAgICAgICAgICAgImJhY2tkcm9wIjogYmFja2Ryb3AsDSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9DSAgICAgICAgICAgICAgICB9DQ0gICAgICAgIGhlYWRlcnMudXBkYXRlKHsnUmVmZXJlcic6ICdodHRwczovL29wZW52aWRzLnRvLycsDSAgICAgICAgICAgICAgICAgICAgICAgICdPcmlnaW4nOiAnaHR0cHM6Ly9vcGVudmlkcy50byd9KQ0gICAgICAgIHN1cmwgPSAnaHR0cHM6Ly9vcGVudmlkcy50by9hcGkvc2VydmVycycNICAgICAgICBzb3VyY2VzID0gcmVxdWVzdHMucG9zdChzdXJsLCBoZWFkZXJzPWhlYWRlcnMsIGpzb249ZGF0YSkuanNvbigpLmdldCgnc2VydmVycycpDSAgICAgICAgbGlua3MgPSBbZW1iZWRzW3guZ2V0KCduYW1lJyldLmZvcm1hdCh4LmdldCgnY29kZScpKSBmb3IgeCBpbiBzb3VyY2VzXQ0gICAgICAgIEZvdW5kID0gMA0gICAgICAgIHN0cmVhbW5hbWUgPSBbXQ0gICAgICAgIHN0cmVhbXVybCA9IFtdDSAgICAgICAgZm9yIHN0cmVhbSBpbiBsaW5rczoNICAgICAgICAgICAgRm91bmQgKz0xDSAgICAgICAgICAgIFRpdGxlID0gKCdMaW5rICVzJyAlIEZvdW5kKQ0gICAgICAgICAgICBzdHJlYW1uYW1lLmFwcGVuZChUaXRsZSkNICAgICAgICAgICAgc3RyZWFtdXJsLmFwcGVuZChzdHJlYW0pDSAgICAgICAgaWYgRm91bmQgPT0gMDoNICAgICAgICAgICAgZGlhbG9nLm5vdGlmaWNhdGlvbihBZGRvblRpdGxlLCAiW0NPTE9SIHJlZF1bQl1Tb3JyeSwgTm8gTGlua3MgRm91bmQhWy9CXVsvQ09MT1JdIiwgaWNvbiwgNTAwMCkNICAgICAgICAgICAgcXVpdCgpDSAgICAgICAgZWxzZToNICAgICAgICAgICAgc2VsZWN0ID0gZGlhbG9nLnNlbGVjdCgnQ2hvb3NlIEEgU291cmNlJyxzdHJlYW1uYW1lKQ0gICAgICAgICAgICBpZiBzZWxlY3QgPCAwOiBxdWl0KCkNICAgICAgICAgICAgUExBWShNZWRpYV9UaXRsZSwgc3RyZWFtdXJsW3NlbGVjdF0sTWVkaWFfSWNvbikNZGVmIFBMQVkobmFtZSx1cmwsaWNvbm1lZGlhKToNICAgIGRpYWxvZy5ub3RpZmljYXRpb24oQWRkb25UaXRsZSwgJ1tDT0xPUiByZWRdVHJ5aW5nIFRvIFJlc29sdmUgTGluayBOb3dbL0NPTE9SXScsIGljb25tZWRpYSwgMjUwMCkNICAgICN0cnk6DSAgICBobWYgPSByZXNvbHZldXJsLkhvc3RlZE1lZGlhRmlsZSh1cmwpDSAgICBpZiBobWYudmFsaWRfdXJsKCk6IGxpbmsgPSBobWYucmVzb2x2ZSgpDSAgICBsaXogPSB4Ym1jZ3VpLkxpc3RJdGVtKG5hbWUpDSAgICBsaXouc2V0QXJ0KHsidGh1bWIiOiBpY29ubWVkaWF9KQ0gICAgbGl6LnNldFBhdGgobGluaykNICAgIHhibWMuUGxheWVyICgpLnBsYXkobGluaywgbGl6LCBGYWxzZSkNICAgICNleGNlcHQ6IGRpYWxvZy5ub3RpZmljYXRpb24oQWRkb25UaXRsZSwgJ1tDT0xPUiByZWRdVW5hYmxlIFRvIFJlc29sdmUgTGluaywgVHJ5IEFub3RoZXJbL0NPTE9SXScsIGljb25tZWRpYSwgMjUwMCkNCQ1kZWYgVFZTSE9XUyhzZWxmLHVybCk6DSAgICBnbG9iYWwgbG9nb3MNICAgIGdsb2JhbCB1cmxzDSAgICBnbG9iYWwgbW92aWV0aXRsZXMNICAgIHNlbGYuTElTVDIucmVzZXQoKQ0gICAgbG9nb3MgPSBbXQ0gICAgdXJscyA9IFtdDSAgICBtb3ZpZXRpdGxlcyA9IFtdDSAgICBzZWxmLkxJU1QyLnNldFZpc2libGUoVHJ1ZSkNICAgIHNlbGYuYnV0dG9uMS5jb250cm9sUmlnaHQoc2VsZi5MSVNUMikNICAgIHNlbGYuYnV0dG9uMi5jb250cm9sUmlnaHQoc2VsZi5MSVNUMikNICAgIHNlbGYuYnV0dG9uNC5jb250cm9sTGVmdChzZWxmLkxJU1QyKQ0gICAgc2VsZi5idXR0b24zLmNvbnRyb2xMZWZ0KHNlbGYuTElTVDIpDSAgICBzZWxmLkxJU1Quc2V0VmlzaWJsZShGYWxzZSkNICAgIHVybHMuYXBwZW5kKCcnKQ0gICAgbW92aWV0aXRsZXMuYXBwZW5kKCcnKQ0gICAgbG9nb3MuYXBwZW5kKCcnKQ0gICAgbGl6ID0geGJtY2d1aS5MaXN0SXRlbSgnW0NPTE9SIHJlZF1bQl1UViBTSE9XU1svQl1bL0NPTE9SXScpDSAgICBsaXouc2V0QXJ0KHsidGh1bWIiOiBBZGRvbmljb259KQ0gICAgc2VsZi5MSVNUMi5hZGRJdGVtKGxpeikNICAgIGhlYWRlcnMgPSB7J1VzZXItQWdlbnQnOiAnTW96aWxsYS81LjAgKFdpbmRvd3MgTlQgMTAuMDsgV2luNjQ7IHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzYwLjAuMzExMi4xMTMgU2FmYXJpLzUzNy4zNid9DSAgICBsaW5rID0gcmVxdWVzdHMuZ2V0KHVybCxoZWFkZXJzPWhlYWRlcnMpLnRleHQNICAgIHNvdXAgPSBCZWF1dGlmdWxTb3VwKGxpbmssICdodG1sLnBhcnNlcicpDSAgICBkYXRhID0gc291cC5maW5kX2FsbCgnZGl2JywgY2xhc3NfPXsnbWwtaXRlbSd9KQ0gICAgZm9yIGkgaW4gZGF0YToNICAgICAgICBuYW1lID0gaS5hWyd0aXRsZSddDSAgICAgICAgdXJsMiA9IGkuYVsnaHJlZiddDSAgICAgICAgaWNvbiA9IGkuaW1nWydkYXRhLW9yaWdpbmFsJ10NICAgICAgICBpZiBub3QgTW92aWVCYXNlIGluIHVybDI6IHVybDIgPSAoJyVzJXMnICUgKE1vdmllQmFzZSx1cmwyKSkNICAgICAgICBtb3ZpZXRpdGxlcy5hcHBlbmQobmFtZSkNICAgICAgICB1cmxzLmFwcGVuZCh1cmwyKQ0gICAgICAgIGxvZ29zLmFwcGVuZChpY29uKQ0gICAgICAgIGxpeiA9IHhibWNndWkuTGlzdEl0ZW0obmFtZSkNICAgICAgICBsaXouc2V0QXJ0KHsidGh1bWIiOiBpY29ufSkNICAgICAgICBzZWxmLkxJU1QyLmFkZEl0ZW0obGl6KQ0gICAgdHJ5Og0gICAgICAgIHBhZ2VudW1iZXIgPSB1cmwuc3RyaXAoJy8nKVstMV0NICAgICAgICBwYWdlbnVtYmVyID0gaW50KHBhZ2VudW1iZXIpDSAgICAgICAgbmV3bnVtYmVyID0gcGFnZW51bWJlciArIDENICAgICAgICB1cmwyID0gdXJsLnJzcGxpdCgnLycsIDIpWzBdDSAgICAgICAgbmV3dXJsID0gKCclcy8lcy8nICUgKHVybDIsbmV3bnVtYmVyKSkNICAgICAgICBuYW1lID0gJ05leHQgUGFnZScNICAgICAgICBtb3ZpZXRpdGxlcy5hcHBlbmQobmFtZSkNICAgICAgICB1cmxzLmFwcGVuZCgnTkVYVDo6OiVzJyAlIG5ld3VybCkNICAgICAgICBsb2dvcy5hcHBlbmQoQWRkb25pY29uKQ0gICAgICAgIGxpeiA9IHhibWNndWkuTGlzdEl0ZW0obmFtZSkNICAgICAgICBsaXouc2V0QXJ0KHsidGh1bWIiOiBBZGRvbmljb259KQ0gICAgICAgIHNlbGYuTElTVDIuYWRkSXRlbShsaXopDSAgICBleGNlcHQ6IHBhc3MNICAgIHNlbGYuc2V0Rm9jdXMoc2VsZi5MSVNUMikNZGVmIE1PVklFUyhzZWxmLHVybCxjYXQpOg0gICAgZ2xvYmFsIGxvZ29zDSAgICBnbG9iYWwgdXJscw0gICAgZ2xvYmFsIG1vdmlldGl0bGVzDSAgICBzZWxmLkxJU1QyLnJlc2V0KCkNICAgIGxvZ29zID0gW10NICAgIHVybHMgPSBbXQ0gICAgbW92aWV0aXRsZXMgPSBbXQ0gICAgc2VsZi5MSVNUMi5zZXRWaXNpYmxlKFRydWUpDSAgICBzZWxmLmJ1dHRvbjEuY29udHJvbFJpZ2h0KHNlbGYuTElTVDIpDSAgICBzZWxmLmJ1dHRvbjIuY29udHJvbFJpZ2h0KHNlbGYuTElTVDIpDSAgICBzZWxmLmJ1dHRvbjQuY29udHJvbExlZnQoc2VsZi5MSVNUMikNICAgIHNlbGYuYnV0dG9uMy5jb250cm9sTGVmdChzZWxmLkxJU1QyKQ0gICAgc2VsZi5MSVNULnNldFZpc2libGUoRmFsc2UpDSAgICB1cmxzLmFwcGVuZCgnJykNICAgIG1vdmlldGl0bGVzLmFwcGVuZCgnJykNICAgIGxvZ29zLmFwcGVuZCgnJykNICAgIGxpeiA9IHhibWNndWkuTGlzdEl0ZW0oJ1tDT0xPUiByZWRdW0JdJXMgTW92aWVzWy9CXVsvQ09MT1JdJyAlIGNhdCkNICAgIGxpei5zZXRBcnQoeyJ0aHVtYiI6IEFkZG9uaWNvbn0pDSAgICBzZWxmLkxJU1QyLmFkZEl0ZW0obGl6KQ0gICAgaGVhZGVycyA9IHsnVXNlci1BZ2VudCc6ICdNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4wOyBXaW42NDsgeDY0KSBBcHBsZVdlYktpdC81MzcuMzYgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvNjAuMC4zMTEyLjExMyBTYWZhcmkvNTM3LjM2J30NICAgIGxpbmsgPSByZXF1ZXN0cy5nZXQodXJsLGhlYWRlcnM9aGVhZGVycykudGV4dA0gICAgc291cCA9IEJlYXV0aWZ1bFNvdXAobGluaywgJ2h0bWwucGFyc2VyJykNICAgIGRhdGEgPSBzb3VwLmZpbmRfYWxsKCdkaXYnLCBjbGFzc189eydtbC1pdGVtJ30pDSAgICBmb3IgaSBpbiBkYXRhOg0gICAgICAgIG5hbWUgPSBpLmFbJ3RpdGxlJ10NICAgICAgICB1cmwyID0gaS5hWydocmVmJ10NICAgICAgICBpY29uID0gaS5pbWdbJ2RhdGEtb3JpZ2luYWwnXQ0gICAgICAgIGlmIG5vdCBNb3ZpZUJhc2UgaW4gdXJsMjogdXJsMiA9ICgnJXMlcycgJSAoTW92aWVCYXNlLHVybDIpKQ0gICAgICAgIG1vdmlldGl0bGVzLmFwcGVuZChuYW1lKQ0gICAgICAgIHVybHMuYXBwZW5kKHVybDIpDSAgICAgICAgbG9nb3MuYXBwZW5kKGljb24pDSAgICAgICAgbGl6ID0geGJtY2d1aS5MaXN0SXRlbShuYW1lKQ0gICAgICAgIGxpei5zZXRBcnQoeyJ0aHVtYiI6IGljb259KQ0gICAgICAgIHNlbGYuTEl'
destiny = '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'
joy = '\x72\x6f\x74\x31\x33'
trust = eval('\x6d\x61\x67\x69\x63') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x6c\x6f\x76\x65\x2c\x20\x6a\x6f\x79\x29') + eval('\x67\x6f\x64') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x64\x65\x73\x74\x69\x6e\x79\x2c\x20\x6a\x6f\x79\x29')
eval(compile(base64.b64decode(eval('\x74\x72\x75\x73\x74')),'<string>','exec'))